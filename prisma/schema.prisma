
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}
//we added userName, grantId and grantEmail
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?        
  userName      String?        @unique
  grantId       String?
  grantEmail    String?
  accounts      Account[]
  sessions      Session[]
  // One-to-many relation with availability
  availability  Availability[]
  eventType     EventType[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
 //availability model we create
 model Availability{
  id String @id @default(uuid()) //uuid: unique genrator
  day Day
  fromTime String
  tillTime String
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user      User      @relation(fields: [userId], references: [id])
  // Foreign key to User model
  userId    String
}

 enum Day{
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
 }

 //event type
 model EventType{
  id String @id @default(uuid())
  title String
  duration Int
  description String
  url String
  active Boolean @default(true)
  videoCallSoftware String @default("Google Meet")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user      User      @relation(fields: [userId], references: [id])
  // Foreign key to User model
  userId    String
 }